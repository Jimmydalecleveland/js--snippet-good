{
  "console log": {
    "prefix": "cl",
    "body": "console.log($1)"
  },
  "console log with color": {
    "prefix": "clc",
    "body": "console.log('%c$1', 'color: ${2:cornflowerblue};'$3)"
  },
  "console log group": {
    "prefix": "clg",
    "body": [
      "console.group('$1')",
      "\tconsole.log($2)",
      "console.groupEnd('$1')"
    ]
  },
  "import module": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0"
  },
  "import module destructured": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0"
  },
  "import React": {
    "prefix": "imr",
    "body": "import React from 'react'"
  },
  "import React, Component": {
    "prefix": "imrc",
    "body": "import React, { Component } from 'react'"
  },
  "import React, PureComponent": {
    "prefix": "imrpc",
    "body": "import React, { PureComponent } from 'react'"
  },
  "import PropTypes": {
    "prefix": "impt",
    "body": "import PropTypes from 'prop-types'"
  },
  "import shallow from enzyme": {
    "prefix": "imezs",
    "body": "import { shallow } from 'enzyme'"
  },
  "import mount from enzyme": {
    "prefix": "imezm",
    "body": "import { mount } from 'enzyme'"
  },
  "import shallow, mount from enzyme": {
    "prefix": "imezsm",
    "body": "import { shallow, mount } from 'enzyme'"
  },
  "import Styled Components": {
    "prefix": "imsc",
    "body": "import styled from 'styled-components'"
  },
  "import Emotion Styled Components": {
    "prefix": "imes",
    "body": "import styled from '@emotion/styled'"
  },
  "export default module": {
    "prefix": "exp",
    "body": "export default $1$0"
  },
  "React: Component class with export after": {
    "prefix": "rce",
    "body": [
      "import React, { Component } from 'react'",
      "",
      "class ${1:${TM_FILENAME_BASE}} extends Component {",
      "\trender() {",
      "\t\treturn (",
      "\t\t\t<${2:div}>",
      "\t\t\t\t$3",
      "\t\t\t</{2:div}>",
      "\t\t)",
      "\t}",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "Creates a React component class with export after the declaration"
  },
  "React: functional component": {
    "prefix": "rfc",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn (",
      "\t\t<${3:div}>",
      "\t\t\t$4",
      "\t\t</${3:div}>",
      "\t)",
      "}",
      ""
    ],
    "description": "React Functional Component"
  },
  "React: function component with export after": {
    "prefix": "rfe",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn (",
      "\t\t<${3:div}>",
      "\t\t\t$4",
      "\t\t</${3:div}>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React Function Component with export after declaration"
  },
  "React: stateless functional component with export after": {
    "prefix": "rse",
    "body": [
      "import React from 'react'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn (",
      "\t\t<${3:div}>",
      "\t\t\t$4",
      "\t\t</${3:div}>",
      "\t)",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React Stateless Functional Component with export after declaration (legacy support for original snippet)"
  },
  "React: functional component with PropTypes and export after": {
    "prefix": "rfpe",
    "body": [
      "import React from 'react'",
      "import PropTypes from 'prop-types'",
      "",
      "const ${1:${TM_FILENAME_BASE}} = ($2) => {",
      "\treturn (",
      "\t\t<${3:div}>",
      "\t\t\t$4",
      "\t\t</${3:div}>",
      "\t)",
      "}",
      "",
      "${1:${TM_FILENAME_BASE}}.propTypes = {",
      "\t$5",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}}",
      ""
    ],
    "description": "React Stateless Functional Component with export after declaration (legacy support for original snippet)"
  },
  "React: ComponentDidUpdate": {
    "prefix": "cdu",
    "body": ["componentDidUpdate(prevProps, prevState) {", "\t$1", "}"]
  },
  "React: componentDidMount": {
    "prefix": "cdm",
    "body": ["componentDidMount() {", "\t$1", "}"]
  },
  "React: componentDidMount with log": {
    "prefix": "cdml",
    "body": [
      "componentDidMount() {",
      "\tconsole.log('${1:${TM_FILENAME_BASE}} Mounted')",
      "}"
    ]
  },
  "React: componentDidMount with log (color)": {
    "prefix": "cdmlc",
    "body": [
      "componentDidMount() {",
      "\tconsole.log('%c${1:${TM_FILENAME_BASE}} Mounted', 'color: cornflowerblue;')",
      "}"
    ]
  },
  "PropType: Array": {
    "prefix": "pta",
    "body": "PropTypes.array,"
  },
  "PropType: Array (Required)": {
    "prefix": "ptar",
    "body": "PropTypes.array.isRequired,"
  },
  "PropType: Boolean": {
    "prefix": "ptb",
    "body": "PropTypes.bool,"
  },
  "PropType: Boolean (Required)": {
    "prefix": "ptbr",
    "body": "PropTypes.bool.isRequired,"
  },
  "PropType: Element": {
    "prefix": "ptel",
    "body": "PropTypes.element,",
    "description": "React Docs: A React element"
  },
  "PropType: Element (Required)": {
    "prefix": "ptelr",
    "body": "PropTypes.element.isRequired,",
    "description": "React Docs: A React element"
  },
  "PropType: Function": {
    "prefix": "ptf",
    "body": "PropTypes.func,"
  },
  "PropType: Function (Required)": {
    "prefix": "ptfr",
    "body": "PropTypes.func.isRequired,"
  },
  "PropType: Node": {
    "prefix": "ptnd",
    "body": "PropTypes.node,",
    "description": "React Docs: 'Anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.'"
  },
  "PropType: Node (Required)": {
    "prefix": "ptndr",
    "body": "PropTypes.node.isRequired,",
    "description": "React Docs: 'Anything that can be rendered: numbers, strings, elements or an array (or fragment) containing these types.'"
  },
  "PropType: Number": {
    "prefix": "ptn",
    "body": "PropTypes.number,"
  },
  "PropType: Number (Required)": {
    "prefix": "ptnr",
    "body": "PropTypes.number.isRequired,"
  },
  "PropType: Object": {
    "prefix": "pto",
    "body": "PropTypes.object,"
  },
  "PropType: Object (Required)": {
    "prefix": "ptor",
    "body": "PropTypes.object.isRequired,"
  },
  "PropType: String": {
    "prefix": "pts",
    "body": "PropTypes.string,"
  },
  "PropType: String (Required)": {
    "prefix": "ptsr",
    "body": "PropTypes.string.isRequired,"
  },
  "Styled Components: create component": {
    "prefix": "sc",
    "body": ["const ${1:Styled} = styled.${2:div}`", "\t$3", "`", ""]
  },
  "Testing: `describe` block": {
    "prefix": "des",
    "body": ["describe('$1', () => {", "\t$2", "})"]
  },
  "Testing: `it` block": {
    "prefix": "tit",
    "body": ["it('$1', () => {", "\t$2", "})"]
  },
  "Testing: expect to match snapshot": {
    "prefix": "expss",
    "body": ["expect($1).toMatchSnapshot()"]
  },
  "Testing: expect to equal": {
    "prefix": "expte",
    "body": ["expect($1).toEqual($2)"]
  },
  "Testing: expect to equal (groovy = alternative)": {
    "prefix": "exp==",
    "body": ["expect($1).toEqual($2)"]
  },
  "Enzyme: shallow": {
    "prefix": "shal",
    "body": ["const $1 = shallow(<$2 />)"]
  },
  "Enzyme: shallow with props": {
    "prefix": "shalp",
    "body": ["const $1 = shallow(<$2 {...props} />)"]
  },
  "Enzyme: mount": {
    "prefix": "mnt",
    "body": ["const $1 = mount(<$2 />)"]
  },
  "Enzyme: mount with props": {
    "prefix": "mntp",
    "body": ["const $1 = mount(<$2 {...props} />)"]
  },
  "Storybook: component story setup": {
    "prefix": "sbc",
    "body": [
      "import React from 'react'",
      "import { storiesOf } from '@storybook/react'",
      "",
      "import ${1:${TM_FILENAME/\\..*//}} from '${2:.}'",
      "",
      "storiesOf('${3:Components}|${1}}', module).add('default', () => (",
      "\t<${1}>$4</${1}>",
      "))"
    ]
  }
}
